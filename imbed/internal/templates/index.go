// Code generated by go-imbed. DO NOT EDIT.

// Package templates holds binary resources embedded into Go executable
package templates

import (
	"os"
	"io"
	"bytes"
	"path/filepath"
	"sort"
	"path"
	"compress/gzip"
	"io/ioutil"
	"time"
)

func blob_bytes(uint32) []byte
func blob_string(uint32) string

// Asset represents binary resource stored within Go executable. Asset implements
// fmt.Stringer and io.WriterTo interfaces, decompressing binary data if necessary.
type Asset struct {
	name         string // File name
	size         int32  // File size (uncompressed)
	blob         []byte // Resource blob []byte
	str_blob     string // Resource blob as a string
	isCompressed bool   // true if resources was compressed with gzip
	mime         string // MIME Type
	tag          string // Tag is essentially a Tag of resource content and can be used as a value for "Etag" HTTP header
}

// Name returns the base name of the asset
func (a *Asset) Name() string       { return a.name }
// MimeType returns MIME Type of the asset
func (a *Asset) MimeType() string   { return a.mime }
// Tag returns a string which can serve as an unique version identifier for the asset (i.e., "Etag")
func (a *Asset) Tag() string        { return a.tag  }
// IsCompressed returns true of asset has been compressed
func (a *Asset) IsCompressed() bool { return a.isCompressed }
// String returns (uncompressed, if necessary) content of asset as a string
func (a *Asset) String() string {
	if a.isCompressed {
		ungzip, _ := gzip.NewReader(bytes.NewReader(a.blob))
		ret, _ := ioutil.ReadAll(ungzip)
		ungzip.Close()
		return string(ret)
	}
	return a.str_blob
}

// Bytes returns (uncompressed) content of asset as a []byte
func (a *Asset) Bytes() []byte {
	if a.isCompressed {
		ungzip, _ := gzip.NewReader(bytes.NewReader(a.blob))
		ret, _ := ioutil.ReadAll(ungzip)
		ungzip.Close()
		return ret
	}
	ret := make([]byte, len(a.blob))
	copy(ret, a.blob)
	return ret
}

// Size implements os.FileInfo and returns the size of the asset (uncompressed, if asset has been compressed)
func (a *Asset) Size() int64        { return int64(a.size) }
// Mode implements os.FileInfo and always returns 0444
func (a *Asset) Mode() os.FileMode  { return 0444 }
// ModTime implements os.FileInfo and returns the time stamp when this package has been produced (the same value for all the assets)
func (a *Asset) ModTime() time.Time { return stamp }
// IsDir implements os.FileInfo and returns false
func (a *Asset) IsDir() bool        { return false }
// Sys implements os.FileInfo and returns nil
func (a *Asset) Sys() interface{}   { return a }

// WriteTo implements io.WriterTo interface and writes content of the asset to w
func (a *Asset) WriteTo(w io.Writer) (int64, error) {
	if a.isCompressed {
		ungzip, _ := gzip.NewReader(bytes.NewReader(a.blob))
		n, err := io.Copy(w, ungzip)
		ungzip.Close()
		return n, err
	}
	n, err := w.Write(a.blob)
	return int64(n), err
}

type assetReader struct {
	bytes.Reader
}

func (r *assetReader) Close() error {
	r.Reset(nil)
	return nil
}

// Returns content of the asset as io.ReaderCloser.
func (a *Asset) Reader() io.ReadCloser {
	if a.isCompressed {
		ungzip, _ := gzip.NewReader(bytes.NewReader(a.blob))
		return ungzip
	} else {
		ret := &assetReader{}
		ret.Reset(a.blob)
		return ret
	}
}

func cleanPath(path string) string {
	path = filepath.Clean(path)
	if filepath.IsAbs(path) {
		path = path[len(filepath.VolumeName(path)):]
		if len(path) > 0 || os.IsPathSeparator(path[0]) {
			path = path[1:]
		}
	} else if path == "." {
		return ""
	}
	return filepath.ToSlash(path)
}

// Opens asset as an io.ReadCloser. Returns os.ErrNotExist if no asset is found.
func Open(name string) (File, error) {
	return FS().Open(name)
}

// Gets asset by name. Returns nil if no asset found.
func Get(name string) *Asset {
	if entry, ok := fidx[name]; ok {
		return entry
	} else {
		return nil
	}
}

// Get asset by name. Panics if no asset found.
func Must(name string) *Asset {
	if entry, ok := fidx[name]; ok {
		return entry
	} else {
		panic("asset " + name + " not found")
	}
}

type directoryAsset struct {
	name  string
	dirs  []directoryAsset
	files []Asset
}

var root *directoryAsset

// A simple FileSystem abstraction
type FileSystem interface {
	Open(name string) (File, error)
	Stat(name string) (os.FileInfo, error)
	// As in filepath.Walk
	Walk(root string, walkFunc filepath.WalkFunc) error
}

// The CopyTo method extracts all mentioned files
// to a specified location, keeping directory structure.
// If supplied file is a directory, than it will be extracted
// recursively. CopyTo with no file mentioned will extract
// the whole content of the embedded filesystem.
// CopyTo returns error if there is a file with the same name
// at the target location, unless overwrite is set to true, or
// file has the same size and modification file as the extracted
// file.
// templates.CopyTo(".", mode, false) will effectively
// extract content of the filesystem to the current directory (which
// makes it the most space-wise inefficient self-extracting archive
// ever).
func CopyTo(target string, mode os.FileMode, overwrite bool, files ...string) error {
	mode    =  mode&0777
	dirmode := os.ModeDir|((mode&0444)>>2)|mode
	if len(files) == 0 {
		files = []string{""}
	}
	for _, file := range files {
		file = cleanPath(file)
		err := FS().Walk(file, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			targetPath := filepath.Join(target, path)
			fi, err := os.Stat(targetPath)
			if err == nil {
				if info.IsDir() && fi.IsDir() {
					return nil
				} else if info.IsDir() != fi.IsDir() {
					return os.ErrExist
				} else if !overwrite {
					if info.Size() == fi.Size() && info.ModTime().Equal(fi.ModTime()) {
						return nil
					} else {
						return os.ErrExist
					}
				}
			}
			if info.IsDir() {
				return os.MkdirAll(targetPath, dirmode)
			}
			asset := Get(path)
			if asset == nil {
				return os.ErrNotExist
			}
			targetPathDir := filepath.Dir(targetPath)
			if err = os.MkdirAll(targetPathDir, dirmode); err != nil {
				return err
			}
			dst, err := ioutil.TempFile(targetPathDir, ".imbed")
			if err != nil {
				return err
			}
			defer func() {
				dst.Close()
				os.Remove(dst.Name())
			}()
			_, err = asset.WriteTo(dst)
			if err != nil {
				return err
			}
			dst.Close()
			os.Chtimes(dst.Name(), info.ModTime(), info.ModTime())
			os.Chmod(dst.Name(), mode)
			return os.Rename(dst.Name(), targetPath)
		})
		if err != nil {
			return err
		}
	}
	return nil
}

type fileInfoSlice []os.FileInfo
func (fis *fileInfoSlice) Len() int           { return len(*fis) }
func (fis *fileInfoSlice) Less(i, j int) bool { return (*fis)[i].Name() < (*fis)[j].Name() }
func (fis *fileInfoSlice) Swap(i, j int) {
	s := (*fis)[i]
	(*fis)[i] = (*fis)[j]
	(*fis)[j] = s
}

func walkRec(fs FileSystem, info os.FileInfo, p string, walkFn filepath.WalkFunc) error {
	var (
		dir File
		fis fileInfoSlice
		err error
	)
	err = walkFn(p, info, nil)
	if err != nil {
		if info.IsDir() && err == filepath.SkipDir {
			return nil
		}
		return err
	}
	if !info.IsDir() {
		return nil
	}
	dir, err = fs.Open(p)
	if err != nil {
		return walkFn(p, info, err)
	}
	fis, err = dir.Readdir(-1)
	if err != nil {
		return walkFn(p, info, err)
	}
	sort.Sort(&fis)
	for i := range fis {
		fn := path.Join(p, fis[i].Name())
		err = walkRec(fs, fis[i], fn, walkFn)
		if err != nil {
			if !fis[i].IsDir() || err != filepath.SkipDir {
				return err
			}
		}
	}
	return nil
}

func walk(fs FileSystem, name string, walkFunc filepath.WalkFunc) error {
	var r os.FileInfo
	var err error
	name = cleanPath(name)
	r, err = fs.Stat(name)
	if err != nil {
		return err
	}
	return walkRec(fs, r, name, walkFunc)
}

type assetFs struct{}

// Returns embedded FileSystem
func FS() FileSystem {
	return &assetFs{}
}

func (fs *assetFs) Walk(root string, walkFunc filepath.WalkFunc) error {
	return walk(fs, root, walkFunc)
}

func (fs *assetFs) Stat(name string) (os.FileInfo, error) {
	name = cleanPath(name)
	if name == "" {
		return root, nil
	}
	if dir, ok := didx[name]; ok {
		return dir, nil
	}
	if asset, ok := fidx[name]; ok {
		return asset, nil
	}
	return nil, os.ErrNotExist
}

func (fs *assetFs) Open(name string) (File, error) {
	name = cleanPath(name)
	if name == "" {
		return root.open(""), nil
	}
	if dir, ok := didx[name]; ok {
		return dir.open(name), nil
	}
	if asset, ok := fidx[name]; ok {
		return asset.open(name), nil
	}
	return nil, os.ErrNotExist
}


// A File is returned by virtual FileSystem's Open method.
// The methods should behave the same as those on an *os.File.
type File interface {
	io.Closer
	io.Reader
	io.Seeker
	Readdir(count int) ([]os.FileInfo, error)
	Stat() (os.FileInfo, error)
}

func (a *Asset) open(name string) File {
	if a.isCompressed {
		ret := &assetCompressedFile{
			asset: a,
			name:  name,
		}
		ret.Reset(bytes.NewReader(a.blob))
		return ret
	} else {
		ret := &assetFile{
			asset: a,
			name:  name,
		}
		ret.Reset(a.blob)
		return ret
	}
}

func (d *directoryAsset) open(name string) File {
	return &directoryAssetFile{
		dir:  d,
		name: name,
		pos:  0,
	}
}

type directoryAssetFile struct {
	dir  *directoryAsset
	name string
	pos  int
}

func (d *directoryAssetFile) Name() string {
	return d.name
}

func (d *directoryAssetFile) checkClosed() error {
	if d.pos < 0 {
		return os.ErrClosed
	}
	return nil
}

func (d *directoryAssetFile) Close() error {
	if err := d.checkClosed(); err != nil {
		return err
	}
	d.pos = -1
	return nil
}

func (d *directoryAssetFile) Read([]byte) (int, error) {
	if err := d.checkClosed(); err != nil {
		return 0, err
	}
	return 0, io.EOF
}

func (d *directoryAssetFile) Stat() (os.FileInfo, error) {
	if err := d.checkClosed(); err != nil {
		return nil, err
	}
	return d.dir, nil
}

func (d *directoryAssetFile) Seek(pos int64, whence int) (int64, error) {
	if err := d.checkClosed(); err != nil {
		return 0, err
	}
	return 0, os.ErrInvalid
}

func (d *directoryAssetFile) Readdir(count int) ([]os.FileInfo, error) {
	if err := d.checkClosed(); err != nil {
		return nil, err
	}
	var (
		last int
		total = len(d.dir.dirs) + len(d.dir.files)
	)
	if d.pos > total {
		if count > 0 {
			return nil, io.EOF
		} else {
			return nil, nil
		}
	}
	if count <= 0 || (d.pos + count) <= total {
		last = total
	} else {
		last = d.pos + count
	}
	ret := make([]os.FileInfo, 0, last - d.pos)
	if d.pos < len(d.dir.dirs) {
		var stop int
		if last > len(d.dir.dirs) {
			stop = len(d.dir.dirs)
		} else {
			stop = last
		}
		for i := d.pos; i < stop; i++ {
			ret = append(ret, &d.dir.dirs[i])
		}
		d.pos = stop
	}
	var start, stop int
	start = d.pos - len(d.dir.dirs)
	stop = last - len(d.dir.dirs)
	for i := start; i < stop; i++ {
		ret = append(ret, &d.dir.files[i])
	}
	d.pos = last
	return ret, nil
}

func (d *directoryAsset) Name() string       { return d.name }
func (d *directoryAsset) Size() int64        { return 0 }
func (d *directoryAsset) Mode() os.FileMode  { return os.ModeDir | 0555 }
func (d *directoryAsset) ModTime() time.Time { return stamp }
func (d *directoryAsset) IsDir() bool        { return true }
func (d *directoryAsset) Sys() interface{}   { return d }

type assetFile struct {
	assetReader
	name string
	asset *Asset
}

func (a *assetFile) Name() string {
	return a.name
}

func (a *assetFile) Stat() (os.FileInfo, error) {
	return a.asset, nil
}

func (a *assetFile) Readdir(int) ([]os.FileInfo, error) {
	return nil, os.ErrInvalid
}
type assetCompressedFile struct {
	gzip.Reader
	name  string
	asset *Asset
}

func (a *assetCompressedFile) Name() string {
	return a.name
}

func (a *assetCompressedFile) Stat() (os.FileInfo, error) {
	return a.asset, nil
}

func (a *assetCompressedFile) Seek(int64, int) (int64, error) {
	return 0, os.ErrInvalid
}

func (a *assetCompressedFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, os.ErrInvalid
}

var fidx = make(map[string]*Asset)
var didx = make(map[string]*directoryAsset)
var stamp time.Time

func init() {
	stamp = time.Unix(1571908442, 807852000)
	bb := blob_bytes(9816)
	bs := blob_string(9816)
	root = &directoryAsset{
		files: []Asset{
			{
				name:         "index.go",
				blob:         bb[0:5775],
				str_blob:     bs[0:5775],
				mime:         "text/x-golang; charset=utf-8",
				tag:          "xomyf7cjnm7zq",
				size:         21780,
				isCompressed: true,
			},
			{
				name:         "index_386.s",
				blob:         bb[5776:5973],
				str_blob:     bs[5776:5973],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "ihibzfvzsneuc",
				size:         327,
				isCompressed: true,
			},
			{
				name:         "index_amd64.s",
				blob:         bb[5976:6184],
				str_blob:     bs[5976:6184],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "dcfwghvd5ccho",
				size:         361,
				isCompressed: true,
			},
			{
				name:         "index_arm.s",
				blob:         bb[6184:6377],
				str_blob:     bs[6184:6377],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "2kykitl4umpta",
				size:         329,
				isCompressed: true,
			},
			{
				name:         "index_arm64.s",
				blob:         bb[6384:6584],
				str_blob:     bs[6384:6584],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "xsewb4p6f52nu",
				size:         331,
				isCompressed: true,
			},
			{
				name:         "index_mips64x.s",
				blob:         bb[6584:6806],
				str_blob:     bs[6584:6806],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "srpac746plm5g",
				size:         370,
				isCompressed: true,
			},
			{
				name:         "index_mipsx.s",
				blob:         bb[6808:7027],
				str_blob:     bs[6808:7027],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "itgddt77jfjk6",
				size:         364,
				isCompressed: true,
			},
			{
				name:         "index_ppc64x.s",
				blob:         bb[7032:7247],
				str_blob:     bs[7032:7247],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "aatq7i5ygiqoy",
				size:         356,
				isCompressed: true,
			},
			{
				name:         "index_s390x.s",
				blob:         bb[7248:7466],
				str_blob:     bs[7248:7466],
				mime:         "text/x-asm; charset=utf-8",
				tag:          "ml3wgknpogqt6",
				size:         313,
				isCompressed: true,
			},
			{
				name:         "index_test.go",
				blob:         bb[7472:9810],
				str_blob:     bs[7472:9810],
				mime:         "text/x-golang; charset=utf-8",
				tag:          "3nfezi3r4tdnc",
				size:         10851,
				isCompressed: true,
			},
		},
	}
	didx[""] = root
	fidx["index.go"] = &root.files[0]
	fidx["index_386.s"] = &root.files[1]
	fidx["index_amd64.s"] = &root.files[2]
	fidx["index_arm.s"] = &root.files[3]
	fidx["index_arm64.s"] = &root.files[4]
	fidx["index_mips64x.s"] = &root.files[5]
	fidx["index_mipsx.s"] = &root.files[6]
	fidx["index_ppc64x.s"] = &root.files[7]
	fidx["index_s390x.s"] = &root.files[8]
	fidx["index_test.go"] = &root.files[9]
}
